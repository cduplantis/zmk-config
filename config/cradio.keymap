#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Some easier keycode defines
#define MUL   KP_MULTIPLY
#define DIV   KP_DIVIDE

// define combos
#define COMBO(NAME, BINDINGS, LAYERS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
  };

// define layers
#define DEFAULT 0
#define SYM     1
#define NAV     2
#define NUM     3
#define TRI     4

// define BT MACRO
#define BT(x) &bt BT_SEL x

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LGUI  k1 &ht LALT  k2  &ht LCTRL k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1 &ht RCTRL k2  &ht RALT  k3  &ht RGUI  k4
#define HRSCL(k1,k2) &ht LCTRL k1  &ht LSHFT k2
#define HRSCR(k1,k2) &ht RSHFT k1 &ht RCTRL k2
#define ALTTAB LA(TAB)
#define ALTGRV LA(GRAVE)



/ {
    combos {
      compatible = "zmk,combos";
      COMBO(escape, &kp ESC, DEFAULT, 2 3)
      COMBO(backspace, &kp BSPC, DEFAULT, 6 7)
      COMBO(tab, &kp TAB, DEFAULT, 22 23)
      COMBO(return, &kp RETURN, DEFAULT, 26 27)

      COMBO(left_ctrl, &kp LCTRL, DEFAULT, 11 12)
      COMBO(left_alt, &kp LALT, DEFAULT, 12 13)
      COMBO(right_alt, &kp RALT, DEFAULT, 16 17)
      COMBO(right_ctrl, &kp RCTRL, DEFAULT, 17 18)
    };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        gresc: grave_escape {
            label = "grave_escape";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

        cmsm: comma_semicolon {
            label = "comma_semicolon";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtcln: dot_colon {
            label = "dot_colon";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        parens: parens {
            label = "parens";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        angles: angles {
            label = "angles";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        bracket: bracket {
            label = "bracket";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };


    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R       &kp T        &kp Y           &kp U        &kp I           &kp O        &kp P
            &kp A      &kp S      &kp D      &kp F       &kp G        &kp H           &kp J        &kp K           &kp L        &kp SQT
            &kp Z      &kp X      &kp C      &kp V       &kp B        &kp N           &kp M        &cmsm           &dtcln       &kp FSLH
                                             &mo SYM     &lt 2 BSPC   &ht LSHFT SPACE &lt 3 RETURN
            >;
        };

       symbols_layer {
            bindings = <
            &gresc     &kp N7     &kp N8     &kp N9      &kp PRCNT     &kp CARET    &kp AMPS   &kp STAR   &kp BSLH      &kp PIPE
            &kp N0     &kp N4     &kp N5     &kp N6      &kp EXCL      &kp EQUAL    &kp LBKT   &kp RBKT   &kp PLUS      &none
            &kp HASH   &kp N1     &kp N2     &kp N3      &kp AT        &kp DOLLAR   &parens    &angles    &kp MINUS     &kp DIV
                                             &trans      &trans        &trans       &trans
            >;
        };

        nav_layer {
            bindings = <
            &kp F9     &kp F10    &kp F11    &kp F12     &none          &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp PSCRN
            &kp F5     &kp F6     &kp F7     &kp F8      &none          &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp SLCK
            &kp F1     &kp F2     &kp F3     &kp F4      &none          &kp TAB    &kp BSPC   &kp DEL    &kp INS    &kp PAUSE_BREAK
                                             &trans      &trans         &caps_word &trans
            >;
        };


        tri_layer {
            bindings = <
            &sys_reset  &none      &none      &none      &none          &kp C_VOL_UP    &none      &none      &none      &sys_reset
            &none       &none      &none      &none      &none          &kp C_MUTE      &kp C_PREV &kp C_PP   &kp C_NEXT &none
            BT(0)       BT(1)      BT(2)      BT(3)      &bt BT_CLR     &kp C_VOL_DN    &none      &none      &none      &bootloader
                                              &trans     &trans         &trans     &trans
            >;
        };
    };
};




